# BEAM Demo Container - Optimized for seamless demo experience
FROM python:3.12-slim

# Prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install uv using the official method from uv documentation
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Create non-root user for security
RUN useradd -m -s /bin/bash beam

# Set working directory
WORKDIR /app

# Copy dependency files first for better Docker layer caching
COPY pyproject.toml uv.lock ./

# Install Python dependencies using uv with caching
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked

# Copy all necessary files for the demo
COPY src/ ./src/
COPY models/ ./models/
COPY data/ ./data/
COPY demo/ ./demo/

# Create necessary directories with proper permissions
RUN mkdir -p /app/data/input \
    /app/data/input_parsed \
    /app/data/enriched_events \
    /app/data/mapper \
    /app/data/demo_temp \
    /app/predictions \
    /app/models/custom_models \
    && chown -R beam:beam /app

# Switch to non-root user
USER beam

# Set environment variables
ENV PYTHONPATH=/app/src
ENV PYTHONUNBUFFERED=1
ENV PATH="/app/.venv/bin:/root/.cargo/bin:$PATH"
ENV BEAM_DATA_DIR=/app/data

# Expose port for potential future web interface
EXPOSE 8000

# Default command runs the demo
CMD ["python", "-c", "from beam.demo import run_demo; run_demo()"]
